import unittest

text_indentation = __import__('5-text_indentation').text_indentation

class TestTextIndentationFunction(unittest.TestCase):
	def test_text_indentation_with_valid_text(self):
		
		import sys
		from io import StringIO
		original_stdout = sys.stdout
		sys.stdout = StringIO()

		text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
beatiorem! Iam ruinas videres""")

		expected_output = """Lorem ipsum dolor sit amet, consectetur adipiscing elit.
Quonam modo?
Utrum igitur tibi litteram videor an totas paginas commovere?
Non autem hoc:
igitur ne illud quidem.
Fortasse id optimum, sed ubi illud:
Plus semper voluptatis?
Teneo, inquit, finem illi videri nihil dolere.
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum
rationi oboediens.
Si id dicis, vicimus.
Inde sermone vario sex illa a Dipylo
stadia confecimus.
Sin aliud quid voles, postea.
Quae animi affectio suum
cuique tribuens atque hanc, quam dico.
Utinam quidem dicerent alium alio
beatiorem!
Iam ruinas videres
"""

		self.assertEqual(sys.stdout.getvalue(), expected_output)

		sys.stdout = original_stdout

	def test_text_indentation_with_invalid_text(self):
		with self.assertRaises(TypeError) as context:
			text_indentation(123)
		self.assertEqual(str(context.exception), "text must be a string")

if __name__ == '__main__':
	unittest.main()
